name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
    branches: # TODO: Delete
      - ci-release

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: 0.1.0 # TODO: Remove
          name: 0.1.0 # TODO: Remove
          draft: true

  build-artifacts:
    name: Build Release Artifacts
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cargo: cargo
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cargo: cross
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            cargo: cross
          - os: macos-latest
            target: x86_64-apple-darwin
            cargo: cargo
          - os: macos-latest
            target: aarch64-apple-darwin
            cargo: cargo
          - os: windows-2019
            target: x86_64-pc-windows-msvc
            cargo: cargo
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        target: ${{ matrix.target }}
    - name: Install Cross
      if: matrix.cargo == 'cross'
      run: |
        cargo install cross

    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-2019'
      run: vcpkg install openssl:x64-windows-static

    - name: Install OpenSSL (macOS ARM64)
      if: matrix.target == 'aarch64-apple-darwin'
      run: |
        brew fetch --force --bottle-tag=arm64_monterey openssl@3 |
        grep -E "(Downloaded to:|Already downloaded:)" |
        grep -v pkg-config |
        awk '{ print $3 }' |
        xargs -n 1 brew install --force-bottle
        echo "PKG_CONFIG_PATH=/usr/local/opt/openssl@3/lib/pkgconfig" >> $GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

    - name: Build
      run: |
        ${{ matrix.cargo }} build --release --verbose --target ${{ matrix.target }}

    - name: Archive # TODO: Replace harcoded version with #{{ github.ref_name }}
      if: matrix.os != 'windows-2019'
      run: |
        dir="archive"
        archive="gantry-crane-0.1.0-${{ matrix.target }}.tar.gz"
        mkdir -p "$dir"
        cp {README.md,LICENSE,gantry-crane.example.toml} "$dir/"
        cp "target/${{ matrix.target }}/release/gantry-crane" "$dir/"
        cd "$dir"
        tar czf "../$archive" *
        echo "ASSET=$archive" >> $GITHUB_ENV

    - name: Archive (Windows) # TODO: Replace harcoded version with #{{ github.ref_name }}
      if: matrix.os == 'windows-2019'
      shell: pwsh
      run: |
        $archive = "gantry-crane-0.1.0-${{ matrix.target }}.zip"
        $compress = @{
          Path = "README.md", "LICENSE", "target/${{ matrix.target }}/release/gantry-crane.exe"
          DestinationPath = $archive
        }
        Compress-Archive @compress
        "ASSET=$archive" >> $env:GITHUB_ENV
    - name: Upload
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
