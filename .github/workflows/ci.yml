name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-2019
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v10
        with:
          runVcpkgInstall: true
          vcpkgJsonGlob: '.github/vcpkg.json'
          vcpkgGitCommitId: 94ce0dab56f4d8ba6bd631ba59ed682b02d45c46
        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows-static
      - name: Workaround for GHA setting VCPKG_ROOT
        if: runner.os == 'Windows'
        run: |
          ${{ github.workspace }}/vcpkg/vcpkg.exe integrate install --vcpkg-root '${{ github.workspace }}/vcpkg'
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

  rustfmt:
    name: Format Rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check

  clippy:
    name: Run Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  cargo-deny:
    name: Check Licenses & Sources
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check licenses sources

  docker_lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: Dockerfile

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: llvm-tools-preview
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose
        env:
          RUSTFLAGS: "-Cinstrument-coverage"
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose
        env:
          RUSTFLAGS: "-Cinstrument-coverage"
          LLVM_PROFILE_FILE: "%p-%m.profraw"
      - name: Run grcov
        run: |
          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf -
          ./grcov . --source-dir . --binary-path ./target/debug/ --output-type lcov --output-path ./lcov.info --branch --ignore-not-existing
      - uses: codecov/codecov-action@v3
        with:
          files: ./lcov.info
